//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace VSlice.Codebox {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ReleaseServiceSoap", Namespace="http://CodeBox/services/ReleaseService/v1.0")]
    public partial class ReleaseService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadReleaseFilesByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadReleaseFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFileShareForReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomInstallLocationForReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReleasesByProjectNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReleaseFilesByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteReleasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteReleaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteReleaseFilesByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ReleaseService() {
            this.Url = global::VSlice.Properties.Settings.Default.VSlice_Codebox_ReleaseService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateReleaseCompletedEventHandler CreateReleaseCompleted;
        
        /// <remarks/>
        public event UploadReleaseFilesByIdCompletedEventHandler UploadReleaseFilesByIdCompleted;
        
        /// <remarks/>
        public event UploadReleaseFilesCompletedEventHandler UploadReleaseFilesCompleted;
        
        /// <remarks/>
        public event CreateFileShareForReleaseCompletedEventHandler CreateFileShareForReleaseCompleted;
        
        /// <remarks/>
        public event SetCustomInstallLocationForReleaseCompletedEventHandler SetCustomInstallLocationForReleaseCompleted;
        
        /// <remarks/>
        public event GetReleasesByProjectNameCompletedEventHandler GetReleasesByProjectNameCompleted;
        
        /// <remarks/>
        public event GetReleaseFilesByIdCompletedEventHandler GetReleaseFilesByIdCompleted;
        
        /// <remarks/>
        public event DeleteReleasesCompletedEventHandler DeleteReleasesCompleted;
        
        /// <remarks/>
        public event DeleteReleaseCompletedEventHandler DeleteReleaseCompleted;
        
        /// <remarks/>
        public event DeleteReleaseFilesByIdCompletedEventHandler DeleteReleaseFilesByIdCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/CreateRelease", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateRelease(string projectName, ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease) {
            object[] results = this.Invoke("CreateRelease", new object[] {
                        projectName,
                        qualityName,
                        releaseVersion,
                        releaseDescription,
                        releaseDate,
                        showOnHomePage,
                        isDefaultRelease});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateReleaseAsync(string projectName, ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease) {
            this.CreateReleaseAsync(projectName, qualityName, releaseVersion, releaseDescription, releaseDate, showOnHomePage, isDefaultRelease, null);
        }
        
        /// <remarks/>
        public void CreateReleaseAsync(string projectName, ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease, object userState) {
            if ((this.CreateReleaseOperationCompleted == null)) {
                this.CreateReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReleaseOperationCompleted);
            }
            this.InvokeAsync("CreateRelease", new object[] {
                        projectName,
                        qualityName,
                        releaseVersion,
                        releaseDescription,
                        releaseDate,
                        showOnHomePage,
                        isDefaultRelease}, this.CreateReleaseOperationCompleted, userState);
        }
        
        private void OnCreateReleaseOperationCompleted(object arg) {
            if ((this.CreateReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateReleaseCompleted(this, new CreateReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/UploadReleaseFilesById", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadReleaseFilesById(string projectName, int releaseId, ReleaseFile[] files) {
            this.Invoke("UploadReleaseFilesById", new object[] {
                        projectName,
                        releaseId,
                        files});
        }
        
        /// <remarks/>
        public void UploadReleaseFilesByIdAsync(string projectName, int releaseId, ReleaseFile[] files) {
            this.UploadReleaseFilesByIdAsync(projectName, releaseId, files, null);
        }
        
        /// <remarks/>
        public void UploadReleaseFilesByIdAsync(string projectName, int releaseId, ReleaseFile[] files, object userState) {
            if ((this.UploadReleaseFilesByIdOperationCompleted == null)) {
                this.UploadReleaseFilesByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadReleaseFilesByIdOperationCompleted);
            }
            this.InvokeAsync("UploadReleaseFilesById", new object[] {
                        projectName,
                        releaseId,
                        files}, this.UploadReleaseFilesByIdOperationCompleted, userState);
        }
        
        private void OnUploadReleaseFilesByIdOperationCompleted(object arg) {
            if ((this.UploadReleaseFilesByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadReleaseFilesByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/UploadReleaseFiles", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadReleaseFiles(string projectName, string releaseVersion, ReleaseQualityName qualityName, ReleaseFile[] files) {
            this.Invoke("UploadReleaseFiles", new object[] {
                        projectName,
                        releaseVersion,
                        qualityName,
                        files});
        }
        
        /// <remarks/>
        public void UploadReleaseFilesAsync(string projectName, string releaseVersion, ReleaseQualityName qualityName, ReleaseFile[] files) {
            this.UploadReleaseFilesAsync(projectName, releaseVersion, qualityName, files, null);
        }
        
        /// <remarks/>
        public void UploadReleaseFilesAsync(string projectName, string releaseVersion, ReleaseQualityName qualityName, ReleaseFile[] files, object userState) {
            if ((this.UploadReleaseFilesOperationCompleted == null)) {
                this.UploadReleaseFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadReleaseFilesOperationCompleted);
            }
            this.InvokeAsync("UploadReleaseFiles", new object[] {
                        projectName,
                        releaseVersion,
                        qualityName,
                        files}, this.UploadReleaseFilesOperationCompleted, userState);
        }
        
        private void OnUploadReleaseFilesOperationCompleted(object arg) {
            if ((this.UploadReleaseFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadReleaseFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/CreateFileShareForRelease", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateFileShareForRelease(string entryName, int releaseId, string fileNameToOpen) {
            object[] results = this.Invoke("CreateFileShareForRelease", new object[] {
                        entryName,
                        releaseId,
                        fileNameToOpen});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFileShareForReleaseAsync(string entryName, int releaseId, string fileNameToOpen) {
            this.CreateFileShareForReleaseAsync(entryName, releaseId, fileNameToOpen, null);
        }
        
        /// <remarks/>
        public void CreateFileShareForReleaseAsync(string entryName, int releaseId, string fileNameToOpen, object userState) {
            if ((this.CreateFileShareForReleaseOperationCompleted == null)) {
                this.CreateFileShareForReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFileShareForReleaseOperationCompleted);
            }
            this.InvokeAsync("CreateFileShareForRelease", new object[] {
                        entryName,
                        releaseId,
                        fileNameToOpen}, this.CreateFileShareForReleaseOperationCompleted, userState);
        }
        
        private void OnCreateFileShareForReleaseOperationCompleted(object arg) {
            if ((this.CreateFileShareForReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFileShareForReleaseCompleted(this, new CreateFileShareForReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/SetCustomInstallLocationForRelease", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCustomInstallLocationForRelease(string entryName, int releaseId, string installLocation) {
            this.Invoke("SetCustomInstallLocationForRelease", new object[] {
                        entryName,
                        releaseId,
                        installLocation});
        }
        
        /// <remarks/>
        public void SetCustomInstallLocationForReleaseAsync(string entryName, int releaseId, string installLocation) {
            this.SetCustomInstallLocationForReleaseAsync(entryName, releaseId, installLocation, null);
        }
        
        /// <remarks/>
        public void SetCustomInstallLocationForReleaseAsync(string entryName, int releaseId, string installLocation, object userState) {
            if ((this.SetCustomInstallLocationForReleaseOperationCompleted == null)) {
                this.SetCustomInstallLocationForReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomInstallLocationForReleaseOperationCompleted);
            }
            this.InvokeAsync("SetCustomInstallLocationForRelease", new object[] {
                        entryName,
                        releaseId,
                        installLocation}, this.SetCustomInstallLocationForReleaseOperationCompleted, userState);
        }
        
        private void OnSetCustomInstallLocationForReleaseOperationCompleted(object arg) {
            if ((this.SetCustomInstallLocationForReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomInstallLocationForReleaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/GetReleasesByProjectName", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetReleasesByProjectName(string projectName) {
            object[] results = this.Invoke("GetReleasesByProjectName", new object[] {
                        projectName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetReleasesByProjectNameAsync(string projectName) {
            this.GetReleasesByProjectNameAsync(projectName, null);
        }
        
        /// <remarks/>
        public void GetReleasesByProjectNameAsync(string projectName, object userState) {
            if ((this.GetReleasesByProjectNameOperationCompleted == null)) {
                this.GetReleasesByProjectNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleasesByProjectNameOperationCompleted);
            }
            this.InvokeAsync("GetReleasesByProjectName", new object[] {
                        projectName}, this.GetReleasesByProjectNameOperationCompleted, userState);
        }
        
        private void OnGetReleasesByProjectNameOperationCompleted(object arg) {
            if ((this.GetReleasesByProjectNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleasesByProjectNameCompleted(this, new GetReleasesByProjectNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/GetReleaseFilesById", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetReleaseFilesById(int releaseId) {
            object[] results = this.Invoke("GetReleaseFilesById", new object[] {
                        releaseId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetReleaseFilesByIdAsync(int releaseId) {
            this.GetReleaseFilesByIdAsync(releaseId, null);
        }
        
        /// <remarks/>
        public void GetReleaseFilesByIdAsync(int releaseId, object userState) {
            if ((this.GetReleaseFilesByIdOperationCompleted == null)) {
                this.GetReleaseFilesByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleaseFilesByIdOperationCompleted);
            }
            this.InvokeAsync("GetReleaseFilesById", new object[] {
                        releaseId}, this.GetReleaseFilesByIdOperationCompleted, userState);
        }
        
        private void OnGetReleaseFilesByIdOperationCompleted(object arg) {
            if ((this.GetReleaseFilesByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleaseFilesByIdCompleted(this, new GetReleaseFilesByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/DeleteReleases", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteReleases(string projectName, ReleaseQualityName qualityName, int keepLastXReleases) {
            this.Invoke("DeleteReleases", new object[] {
                        projectName,
                        qualityName,
                        keepLastXReleases});
        }
        
        /// <remarks/>
        public void DeleteReleasesAsync(string projectName, ReleaseQualityName qualityName, int keepLastXReleases) {
            this.DeleteReleasesAsync(projectName, qualityName, keepLastXReleases, null);
        }
        
        /// <remarks/>
        public void DeleteReleasesAsync(string projectName, ReleaseQualityName qualityName, int keepLastXReleases, object userState) {
            if ((this.DeleteReleasesOperationCompleted == null)) {
                this.DeleteReleasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteReleasesOperationCompleted);
            }
            this.InvokeAsync("DeleteReleases", new object[] {
                        projectName,
                        qualityName,
                        keepLastXReleases}, this.DeleteReleasesOperationCompleted, userState);
        }
        
        private void OnDeleteReleasesOperationCompleted(object arg) {
            if ((this.DeleteReleasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteReleasesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/DeleteRelease", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRelease(string projectName, int releaseId) {
            this.Invoke("DeleteRelease", new object[] {
                        projectName,
                        releaseId});
        }
        
        /// <remarks/>
        public void DeleteReleaseAsync(string projectName, int releaseId) {
            this.DeleteReleaseAsync(projectName, releaseId, null);
        }
        
        /// <remarks/>
        public void DeleteReleaseAsync(string projectName, int releaseId, object userState) {
            if ((this.DeleteReleaseOperationCompleted == null)) {
                this.DeleteReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteReleaseOperationCompleted);
            }
            this.InvokeAsync("DeleteRelease", new object[] {
                        projectName,
                        releaseId}, this.DeleteReleaseOperationCompleted, userState);
        }
        
        private void OnDeleteReleaseOperationCompleted(object arg) {
            if ((this.DeleteReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteReleaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/DeleteReleaseFilesById", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteReleaseFilesById(string projectName, int releaseId, string[] fileNames) {
            this.Invoke("DeleteReleaseFilesById", new object[] {
                        projectName,
                        releaseId,
                        fileNames});
        }
        
        /// <remarks/>
        public void DeleteReleaseFilesByIdAsync(string projectName, int releaseId, string[] fileNames) {
            this.DeleteReleaseFilesByIdAsync(projectName, releaseId, fileNames, null);
        }
        
        /// <remarks/>
        public void DeleteReleaseFilesByIdAsync(string projectName, int releaseId, string[] fileNames, object userState) {
            if ((this.DeleteReleaseFilesByIdOperationCompleted == null)) {
                this.DeleteReleaseFilesByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteReleaseFilesByIdOperationCompleted);
            }
            this.InvokeAsync("DeleteReleaseFilesById", new object[] {
                        projectName,
                        releaseId,
                        fileNames}, this.DeleteReleaseFilesByIdOperationCompleted, userState);
        }
        
        private void OnDeleteReleaseFilesByIdOperationCompleted(object arg) {
            if ((this.DeleteReleaseFilesByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteReleaseFilesByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CodeBox/services/ReleaseService/v1.0/Ping", RequestNamespace="http://CodeBox/services/ReleaseService/v1.0", ResponseNamespace="http://CodeBox/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://CodeBox/services/ReleaseService/v1.0")]
    public enum ReleaseQualityName {
        
        /// <remarks/>
        Alpha,
        
        /// <remarks/>
        Beta,
        
        /// <remarks/>
        Production,
        
        /// <remarks/>
        Draft,
        
        /// <remarks/>
        Final,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://CodeBox/services/ReleaseService/v1.0")]
    public partial class ReleaseFile {
        
        private string friendlyLabelField;
        
        private string fileNameField;
        
        private byte[] fileDataField;
        
        private string fileTypeField;
        
        /// <remarks/>
        public string FriendlyLabel {
            get {
                return this.friendlyLabelField;
            }
            set {
                this.friendlyLabelField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
        
        /// <remarks/>
        public string FileType {
            get {
                return this.fileTypeField;
            }
            set {
                this.fileTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void CreateReleaseCompletedEventHandler(object sender, CreateReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void UploadReleaseFilesByIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void UploadReleaseFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void CreateFileShareForReleaseCompletedEventHandler(object sender, CreateFileShareForReleaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFileShareForReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFileShareForReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SetCustomInstallLocationForReleaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetReleasesByProjectNameCompletedEventHandler(object sender, GetReleasesByProjectNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReleasesByProjectNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReleasesByProjectNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetReleaseFilesByIdCompletedEventHandler(object sender, GetReleaseFilesByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReleaseFilesByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReleaseFilesByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DeleteReleasesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DeleteReleaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DeleteReleaseFilesByIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591